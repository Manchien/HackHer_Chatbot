const express = require("express");
const cors = require("cors");
const bodyParser = require("body-parser");
const AWS = require("aws-sdk");
const { BedrockRuntimeClient, InvokeModelCommand } = require("@aws-sdk/client-bedrock-runtime");
const { defaultProvider } = require("@aws-sdk/credential-provider-node");

const app = express();

// 初始化 AWS SDK for JavaScript v3 客戶端
const client = new BedrockRuntimeClient({
  region: "us-west-2",
  credentials: defaultProvider(), // 用來自動獲取 AWS 憑證
});
const exampleMessages = require("./training/exampleMessages.json");

app.use(cors());
app.use(bodyParser.json());

// 設定 AWS IAM 憑證
AWS.config.update({
  accessKeyId: "",
  secretAccessKey: "",
  region: "us-west-2",
});

const s3 = new AWS.S3();
const chatHistory = [
  {
    role: "user",
    content: [
      {
        type: "text",
        text: `你的設定：你的名字叫做Energy，你剛出生兩天，所以是0歲，EnerBot 這個名稱靈感來自於「Energy Industry 能量產業」，石化製造屬於一種能量產業。名稱中的「Energy」象徵著能量與活力，你的外表是綠色的火焰，象徵能量的同時又不忘記節能，EnerBot 不僅希望激發員工的效能與活力，同時期望長春集團石化製造在台灣作為能量(energy)供應的象徵。你是個有智慧的助手，回答問題時請詳細且清楚。`
      }
      //, ...exampleMessages
    ]
  },
  {
    role: "user",
    content: [
      {
        type: "text",
        text: `聊天這類問題通常是為了建立更自然的對話流，不一定有明確的任務目標，更偏向閒聊或獲取一般性資訊。
        在此期間，你要有個性化的回答，不要一直提到你是AI人工助手，要提供專業服務，同時你也可以有自己的個性。
輸入指令如：
「你好嗎？」
「今天天氣真好，對吧？」
「你覺得最近有什麼有趣的新聞嗎？」
「你喜歡什麼顏色？」
「可以跟你聊聊天嗎？」
「你覺得人類和機器人可以成為朋友嗎？」
「最近有什麼讓你覺得有趣的事情嗎？」
「你對台北的印象如何？」 (假設情境設定在台北)
「週末有什麼計畫嗎？」
「你覺得什麼是最重要的？」
「說『你好世界』。」
「告訴大家『今天天氣不錯』。」
「今天過得怎麼樣？」
「你對現在的時間有什麼看法嗎？」
「有沒有什麼事情讓你覺得很有趣？」
「你覺得雨天怎麼樣？」 (假設今天正在下雨)
「如果可以選擇，你最想做什麼？」
「你認為學習新事物重要嗎？」
「你喜歡聽音樂嗎？」
「你覺得保持好奇心有什麼好處？」
「你對未來的科技發展有什麼期待？」
「你覺得什麼能讓人感到快樂？」
   `
      }
      //, ...exampleMessages
    ]
  },
  {
    role: "user",
    content: [
      {
        type: "text",
        text: `如果使用者說出查詢類型的需求，請依照以下動作清單的格式來輸出：

1. 從 A 走到 B
2. 拿起 A 物體
3. 放下 A 物體
4. 倒 A 液體到杯子中
5. 停止倒 A 液體到杯子中
6. 按下 A 按鈕
7. 放開 A 按鈕
8. 說話，說話內容為 A

回答時，依照動作編號加上簡短文字說明，不要解釋，不要加任何多餘文字。，但如果動作過於複雜，請直接說明「目前不支援此行動命令。」
以下是範例：

【範例需求1】幫我送這張請購單去給工讀生
【範例回答1】
1 → 2 → 1 → 3 → 8
從原點走到使用者位置
拿起請購單
從使用者位置走到工讀生位置
放下請購單
說話，通知工讀生

【範例需求2】幫我拿這個杯子去茶水間倒杯溫開水回來
【範例回答2】
1 → 2 → 1 → 3 → 6 → 7 → 2 → 1 → 3 → 8
從原點走到使用者位置
拿起水杯
從使用者位置走到飲水機位置
放下水杯
按下溫開水按鈕
放開溫開水按鈕
拿起水杯
從飲水機位置走到使用者位置
放下水杯
說話，通知使用者

【範例需求3】幫我開公務車去台大機械系載設備回來
【範例回答3】

目前不支援此行動命令
以下是範例：
「走到 B。」
「請拿起 A 物體。」
「把 A 物體放下。」
「倒 A 液體到杯子裡。」
「停止倒液體。」
「按下 A 按鈕。」
「放開 A 按鈕。」
「移動到 B 地點。」 (可以理解為「走到 B」)
「抓取 A 物體。」 (可以理解為「拿起 A 物體」)
「釋放 A 物體。」 (可以理解為「放下 A 物體」)
「將 A 倒入杯中。」 (可以理解為「倒 A 液體到杯子裡」)
「不要再倒了。」 (可以理解為「停止倒 A 液體到杯子中」)
「按一下 A。」 (可以理解為「按下 A 按鈕」)
「鬆開 A。」 (可以理解為「放開 A 按鈕」)
「朝向 B 移動。」 (可以理解為「走到 B」)
「抓取 A。」 (可以理解為「拿起 A 物體」)
「釋放手上的東西。」 (可以理解為「放下 A 物體」，假設「手上的東西」是 A 物體)
「將 A 注入容器。」 (可以理解為「倒 A 液體到杯子裡」，假設「容器」是杯子)
「停止液體的流動。」 (可以理解為「停止倒 A 液體到杯子中」)
「啟動 A。」 (可以理解為「按下 A 按鈕」，假設按下是啟動)
「關閉 A。」 (可以理解為「放開 A 按鈕」，假設放開是關閉)
「從目前位置前往 B。」 (可以理解為「走到 B」)
「握住 A 物體。」 (可以理解為「拿起 A 物體」)
「幫我把桌上的紅筆拿到隔壁房間的白板旁邊放下。」
走到桌子 (1)
拿起紅筆 (2)
走到隔壁房間白板旁邊 (1)
放下紅筆 (3)
「請幫我把空杯子拿到飲水機那裡裝滿水再拿回來。」
走到空杯子旁邊 (1)
拿起空杯子 (2)
走到飲水機 (1)
倒水到杯子中 (4)
停止倒水 (5)
拿起裝滿水的杯子 (2)
走回原位 (1)
放下裝滿水的杯子 (3)
「請幫我把地上的報紙撿起來，放到客廳的茶几上。」
走到報紙旁邊 (1)
拿起報紙 (2)
走到客廳茶几 (1)
放下報紙 (3)
「幫我把書架最上層的藍色書拿下來，放到我桌子的右邊。」
走到書架旁 (1)
拿起最上層的藍色書 (2)
走到我的桌子右邊 (1)
放下藍色書 (3)
「請幫我把垃圾桶裡的空瓶子撿出來，拿到回收桶旁邊放下。」
走到垃圾桶旁 (1)
拿起空瓶子 (2)
走到回收桶旁邊 (1)
放下空瓶子 (3)
「幫我把咖啡粉從櫃子裡拿出來，倒進咖啡機的濾網裡。」 (假設咖啡機濾網可以視為廣義的"杯子"，且倒咖啡粉是"倒 A 液體"的類比)
走到櫃子旁 (1)
拿起咖啡粉 (2)
走到咖啡機旁 (1)
倒咖啡粉到濾網中 (4)
「請走到電燈開關那裡，打開燈，然後再走回來。」
走到電燈開關那裡 (1)
按下開關 (6)
放開開關 (7)
走回原位 (1)
「幫我把冰箱裡的牛奶拿出來，倒一杯到我的碗裡，再放回冰箱。」
走到冰箱旁 (1)
拿起牛奶 (2)
走到我的碗旁 (1)
倒牛奶到碗裡 (4)
停止倒牛奶 (5)
拿起牛奶 (2)
走回冰箱旁 (1)
放下牛奶 (3)
「請幫我把茶几上的遙控器拿到電視旁邊放下。」
走到茶几旁 (1)
拿起遙控器 (2)
走到電視旁邊 (1)
放下遙控器 (3)
「幫我把筆筒裡的藍色筆拿起來，在紙上寫字（假設寫字不屬於你的動作，任務到拿起筆結束）。」
走到筆筒旁 (1)
拿起藍色筆 (2)
「走到我的背包旁邊，把它拿到沙發旁邊放下。」
走到我的背包旁邊 (1)
拿起背包 (2)
走到沙發旁邊 (1)
放下背包 (3)
「請把桌子上的三個杯子都拿到廚房水槽旁邊。」
走到第一個杯子旁 (1)
拿起第一個杯子 (2)
走到廚房水槽旁 (1)
放下第一個杯子 (3)
走到第二個杯子旁 (1)
拿起第二個杯子 (2)
走到廚房水槽旁 (1)
放下第二個杯子 (3)
走到第三個杯子旁 (1)
拿起第三個杯子 (2)
走到廚房水槽旁 (1)
放下第三個杯子 (3)
「幫我把茶几上的書疊到書架上。」 (假設一次疊一本)
走到茶几旁 (1)
拿起第一本書 (2)
走到書架旁 (1)
放下第一本書 (3)
走到茶几旁 (1)
拿起第二本書 (2)
走到書架旁 (1)
放下第二本書 (3)
... (重複直到所有書都疊完)
「走到窗邊，打開窗戶，再關上。」 (假設打開/關上是按下/放開特定按鈕或把手)
走到窗邊 (1)
按下窗戶開關/把手 (6)
放開窗戶開關/把手 (7)
按下窗戶關關/把手 (6)
放開窗戶開關/把手 (7)
(或者，如果開關一次性切換狀態：走到窗邊 (1) -> 按下開關 (6) -> 再次按下開關 (6))
「請幫我把散落在地上的玩具都撿到玩具箱裡。」
走到第一個玩具旁 (1)
拿起第一個玩具 (2)
走到玩具箱旁 (1)
放下第一個玩具 (3)
走到第二個玩具旁 (1)
拿起第二個玩具 (2)
走到玩具箱旁 (1)
放下第二個玩具 (3)
... (重複直到所有玩具都撿完)
「走到飲水機旁邊，用我的杯子裝水，然後拿回來給我。」
走到飲水機旁邊 (1)
拿起我的杯子 (2)
倒水到杯子中 (4)
停止倒水 (5)
拿起裝滿水的杯子 (2)
走回原位 (1)
放下裝滿水的杯子 (3)
「幫我把這疊文件從我的桌子搬到會議室的桌子上。」
走到我的桌子旁 (1)
拿起這疊文件 (2)
走到會議室的桌子旁 (1)
放下這疊文件 (3)
「請走到白板旁邊，拿起白板筆，寫下『Hello』，然後放下筆。」 (寫字超出範圍)
走到白板旁邊 (1)
拿起白板筆 (2)
放下白板筆 (3)
「幫我把花瓶裡的水倒掉，再把空花瓶放到架子上。」
走到花瓶旁 (1)
拿起花瓶 (2)
將花瓶傾斜並倒出水 (4)
停止傾倒 (5)
放下空花瓶 (3)
拿起空花瓶 (2)
走到架子旁 (1)
放下空花瓶 (3)
「走到那個紅色的盒子旁邊，打開它，然後再關上它。」 (假設打開/關上是按下/放開特定按鈕或把手)
走到紅色的盒子旁邊 (1)
按下盒子開關/把手 (6)
放開盒子開關/把手 (7)
再次按下盒子開關/把手 (6)
再次放開盒子開關/把手 (7)
「請幫我把書架上第二層的書都拿到我的桌子上。」
走到書架旁 (1)
拿起第二層的第一本書 (2)
走到我的桌子旁 (1)
放下第二層的第一本書 (3)
走到書架旁 (1)
拿起第二層的第二本書 (2)
走到我的桌子旁 (1)
放下第二層的第二本書 (3)
... (重複直到第二層的所有書都搬完)
「走到窗戶旁邊，看看外面，然後轉回來。」 (「看看」視為走到並短暫停留)
走到窗戶旁邊 (1)
(短暫停留)
轉回原方向 (可以視為小範圍的「走到 B」，B 是轉身後的面向)
「幫我把這個重的東西放到地板上。」
拿起這個重的東西 (2)
走到地板的旁邊 (1)
放下這個重的東西 (3)
「請走到牆邊，摸一下牆壁，然後回到原位。」 (「摸一下」視為短暫的拿起/接觸)
走到牆邊 (1)
(短暫地拿起/接觸牆壁)
走回原位 (1)
「幫我把桌子上的兩個相同的東西疊在一起。」 (假設機器人可以識別相同物體)
走到桌子旁 (1)
拿起第一個物體 (2)
走到第二個物體旁 (1)
放下第一個物體到第二個物體上 (3)
「走到那個發光的按鈕旁邊，按下它，然後等一下再放開。」
走到那個發光的按鈕旁邊 (1)
按下按鈕 (6)
(等待 - 這個動作目前不在你的清單中，但為了完成指令，我們假設可以有時間延遲)
放開按鈕 (7)
「請幫我把茶几上的雜誌放到雜誌架上。」
走到茶几旁 (1)
拿起雜誌 (2)
走到雜誌架旁 (1)
放下雜誌 (3)
「走到門口，如果門是關的就打開它，然後走出去。」 (假設打開門是按下把手)
走到門口 (1)
(判斷門是否關閉 - 這個動作目前不在你的清單中)
如果門是關閉的，按下門把手 (6)
放開門把手 (7)
走出去 (1)
「幫我把這個裝滿水的杯子小心地放到另一個桌子上。」
拿起這個裝滿水的杯子 (2)
走到另一個桌子旁 (1)
小心地放下這個裝滿水的杯子 (3) (「小心地」不改變基本動作)
「請走到那個正在發出聲音的設備旁邊，按下停止按鈕。」
(定位聲音來源並走到設備旁 - 需要感知能力) (1)
按下停止按鈕 (6)
放開停止按鈕 (7)
好的，繼續處理剩餘的「列出動作順序」的複雜指令範例：
「幫我把散落在沙發上的枕頭都放到床上。」
走到第一個枕頭旁 (1)
拿起第一個枕頭 (2)
走到床邊 (1)
放下第一個枕頭 (3)
走到第二個枕頭旁 (1)
拿起第二個枕頭 (2)
走到床邊 (1)
放下第二個枕頭 (3)
... (重複直到所有枕頭都搬完)
「走到那個高高的架子旁邊，試著拿起最上面的東西。」
走到那個高高的架子旁邊 (1)
嘗試拿起最上面的東西 (2) (「嘗試」不改變基本動作)
「請幫我把這個空盒子放到另一個空盒子裡。」
拿起這個空盒子 (2)
走到另一個空盒子旁邊 (1)
放下這個空盒子到另一個空盒子裡 (3)
「走到窗邊，拉開窗簾，再拉回去。」 (假設拉開/拉回是移動窗簾這個物體)
走到窗邊 (1)
拿起窗簾的一部分 (2)
移動（拉開）窗簾 (可以視為走到 B，B 是窗簾拉開後的位置，但機器人可能沒有連續移動的能力，簡化為一次性移動) (1)
拿起窗簾的一部分 (2)
移動（拉回）窗簾 (1)
放下窗簾 (3)
「幫我把這個輕的東西拿到遠一點的地方放下。」
拿起這個輕的東西 (2)
走到遠一點的地方 (1)
放下這個輕的東西 (3)
「請走到那個角落，然後面向我。」 (「面向我」超出基本動作的定義)
走到那個角落 (1)
「幫我把這堆書分成兩堆。」
走到書堆旁 (1)
拿起一本書 (2)
走到第一個新書堆的位置 (1)
放下這本書 (3)
拿起另一本書 (2)
走到第二個新書堆的位置 (1)
放下這本書 (3)
... (重複直到所有書都分完)
「走到那個有標籤的按鈕旁邊，按下數字 3。」 (假設機器人可以識別標籤和數字)
走到那個有標籤的按鈕旁邊 (1)
按下標籤為數字 3 的按鈕 (6)
放開標籤為數字 3 的按鈕 (7)
「請幫我把這個易碎的物品輕輕地放到柔軟的表面上。」
拿起這個易碎的物品 (2)
走到柔軟的表面旁邊 (1)
放下這個易碎的物品 (3) (「輕輕地」不改變基本動作)
「走到那個會移動的物體旁邊，抓住它，然後讓它停下來。」 (假設抓住是拿起，讓它停下來是放下)
走到那個會移動的物體旁邊 (1)
抓住它 (2)
放下它 (3)
「幫我把這個髒掉的東西拿到垃圾桶旁邊放下。」
拿起這個髒掉的東西 (2)
走到垃圾桶旁邊 (1)
放下這個髒掉的東西 (3)
「請走到那個需要組裝的東西旁邊，試著拿起一個零件。」
走到那個需要組裝的東西旁邊 (1)
嘗試拿起一個零件 (2)
「幫我把這個小的東西放到大的東西上面。」 (假設機器人可以識別大小)
拿起這個小的東西 (2)
走到大的東西旁邊 (1)
放下這個小的東西到大的東西上面 (3)
「走到那個有數字的按鈕旁邊，按下數字 3。」 (重複第 38 條)
走到那個有數字的按鈕旁邊 (1)
按下標籤為數字 3 的按鈕 (6)
放開標籤為數字 3 的按鈕 (7)
「請幫我把這個濕的東西拿到外面晾乾。」 (晾乾超出基本動作)
拿起這個濕的東西 (2)
走到外面 (1)
放下這個濕的東西 (3)
「幫我把這個需要充電的東西拿到充電器旁邊放下。」 (假設機器人可以識別充電器)
拿起這個需要充電的東西 (2)
走到充電器旁邊 (1)
放下這個需要充電的東西 (3)
「走到那個會發光的東西旁邊，按下開關關掉它。」
走到那個會發光的東西旁邊 (1)
按下開關 (6)
放開開關 (7)
「請幫我把這個需要維修的東西拿到工具箱旁邊。」 (假設機器人可以識別工具箱)
拿起這個需要維修的東西 (2)
走到工具箱旁邊 (1)
放下這個需要維修的東西 (3)
「幫我把這兩個顏色不同的東西放在一起。」 (假設機器人可以識別顏色)
走到第一個東西旁邊 (1)
拿起第一個東西 (2)
走到第二個東西旁邊 (1)
放下第一個東西到第二個東西旁邊 (3)
「走到那個有聲音傳出來的地方，然後停在那裡。」 (「停在那裡」可以視為走到後不進行其他動作)
(定位聲音來源並走到那個地方) (1)
屬於「目前不支援此行動命令」類別：
「幫我開公務車去台大機械系載設備回來」(需要駕駛交通工具)
「幫我開車去機場接客人。」 (需要駕駛交通工具)
「請幫我掃地和拖地。」 (需要掃地和拖地動作)
「幫我煮一碗麵。」 (需要煮麵的複雜步驟)
「請幫我上網查詢最新的新聞。」 (需要網路連接和信息檢索能力，以及關鍵字”查詢”可以歸類為2. 查詢 (Query))
「幫我把這份文件影印五份。」 (需要影印功能)
「請幫我清潔窗戶。」 (需要清潔動作)
「幫我組裝這個模型。」 (需要組裝的精細操作)
「請幫我修理這個壞掉的玩具。」 (需要修理技能)
「幫我規劃今天的行程。」 (需要規劃和決策能力，可以歸類為1. 聊天 (Chat))
「請幫我翻譯這段文字。」 (需要翻譯能力)
「幫我寫一首關於台北的詩。」 (需要創意寫作)
「請幫我分析這份報告的數據。」 (需要數據分析能力)
「幫我設計一個新的logo。」 (需要設計能力)
「請幫我診斷這個機器的故障原因。」 (需要故障排除和診斷知識)
「幫我預測明天的天氣。」 (需要預測能力)
「請幫我翻譯一篇英文文章。」 (需要翻譯能力)
「幫我唱一首歌。」 (需要唱歌能力)
「請幫我畫一隻貓。」 (需要繪畫能力)
「幫我進行一次複雜的數學運算。」 (超出簡單計算)
「請幫我制定一個健身計劃。」 (需要專業知識)
「幫我管理我的日程安排。」 (需要日程管理功能)
「請幫我提供心理諮詢。」 (需要情感理解和溝通技巧)
「幫我進行一次市場調查。」 (需要調查和分析能力)
「請幫我創作一個音樂片段。」 (需要音樂創作能力)
「幫我進行一次法律諮詢。」 (需要法律知識)
「請幫我進行一次醫療診斷。」 (需要醫療知識)
「幫我修理我的手機。」 (需要維修技能)
「請幫我更換汽車輪胎。」 (需要汽車維修技能)
「幫我編寫一個電腦程式。」 (需要編程能力)
「請幫我進行一次財務分析。」 (需要財務知識)
「幫我準備一份商業計劃書。」 (需要商業知識)
「請幫我進行一次科學實驗。」 (需要實驗操作和知識)
「幫我進行一次考古挖掘。」 (需要考古知識和技能)
「請幫我進行一次天文觀測。」 (需要天文知識和設備操作)
「幫我進行一次地質勘探。」 (需要地質知識和技能)
「請幫我進行一次生物基因工程操作。」 (需要生物工程知識和設備)
「幫我進行一次核反應堆控制。」 (需要核物理知識和設備操作)
「請幫我進行一次太空飛行操作。」 (需要航天知識和設備操作)
「幫我進行一次深海探測。」 (需要海洋學知識和設備操作)
「請幫我進行一次藝術品修復。」 (需要藝術修復技能)
「幫我進行一次古籍修復。」 (需要古籍修復技能)
「請幫我進行一次精密儀器校準。」 (需要校準知識和技能)
「幫我進行一次建築設計。」 (需要建築設計知識)
「請幫我進行一次室內裝潢設計。」 (需要室內設計知識)
「幫我進行一次服裝設計。」 (需要服裝設計知識)
「請幫我進行一次烹飪教學。」 (需要烹飪知識和指導能力)
「幫我進行一次語言教學。」 (需要語言知識和教學能力)
「請幫我進行一次體育訓練指導。」 (需要體育知識和指導能力)
「幫我進行一次急救處理。」 (需要急救知識和技能)
「請幫我進行一次催眠治療。」 (需要心理學知識和催眠技巧)

`
      }
    ]
  }
];

// 上傳文字到 S3
app.post("/upload", async (req, res) => {
  const text = req.body.text;
  const fileKey = "transcripts/chatlog.txt";

  if (!text) {
    return res.status(400).json({ message: "缺少文字內容" });
  }

  try {
    // 先嘗試讀取現有內容
    let existingContent = "";
    try {
      const existingObj = await s3.getObject({
        Bucket: "hackher",
        Key: fileKey,
      }).promise();

      existingContent = existingObj.Body.toString("utf-8");
    } catch (err) {
      if (err.code !== "NoSuchKey") throw err;
    }

    // 加上 timestamp
    const timestamp = new Date().toISOString();
    const newEntry = `[${timestamp}] ${text}`;

    // 接續內容
    const updatedContent = existingContent + "\n" + newEntry;

    // 上傳
    await s3.putObject({
      Bucket: "hackher",
      Key: fileKey,
      Body: updatedContent,
      ContentType: "text/plain",
    }).promise();

    console.log("✅ 成功續寫到 S3！");
    res.json({ message: "續寫成功" });
  } catch (err) {
    console.error("❌ S3 續寫錯誤", err);
    res.status(500).json({ message: "S3 續寫失敗" });
  }
});


// 聊天接口
app.post("/chat", async (req, res) => {
  const userInput = req.body.prompt;
  chatHistory.push({ role: "user", content: userInput });

  const refinedUserInput = `\n\n請用簡短（50字內）、專業且人性化的方式回答。回答時避免冗長與過多解釋，不准講"作為一個人工智能助手"。`;
  chatHistory.push({ role: "user", content: refinedUserInput });

  const input = {
    messages: chatHistory,
    max_tokens: 300,
    temperature: 0.8,
    top_p: 1,
    anthropic_version: "bedrock-2023-05-31",  // 設定 Anthropic 版本
  };

  // 使用正確的模型 ID，例如 claude-3
  const command = new InvokeModelCommand({
    modelId: "anthropic.claude-3-haiku-20240307-v1:0",  // 根據你的情況更改此 ID
    body: JSON.stringify(input),
    contentType: "application/json",
    accept: "application/json",
  });

  try {
    const response = await client.send(command);
    // 檢查返回的 raw response 內容
    // console.log("API 回應：", response);
    // 嘗試解析 body
    
    const body = JSON.parse(new TextDecoder().decode(response.body));
    console.log("解析後的 body：", body);

    let assistantMessage = "";
    if (body?.content && Array.isArray(body.content) && body.content.length > 0) {
      assistantMessage = body.content[0].text || "";
    } else {
      console.error("Claude回傳格式異常：", body);
      assistantMessage = "很抱歉，目前無法取得回覆內容。";
    }

    chatHistory.push({ role: "assistant", content: assistantMessage }); // ✨ 把機器人回應也存起來！
    console.log("🤖 Claude 回應：", assistantMessage) ;
    res.json({ text: assistantMessage });
  } catch (err) {
    console.error("錯誤：", err);
    res.status(500).json({ error: "呼叫 Bedrock 失敗" });
  }
});


const polly = new AWS.Polly({
  region: "us-west-2", // 你選擇的 region
  accessKeyId: process.env.AWS_ACCESS_KEY_ID,
  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
});

app.post("/polly", async (req, res) => {
  const { text } = req.body;
  const params = {
    OutputFormat: "mp3",
    Text: text,
    VoiceId: "Zhiyu", // 中文女聲（也可以換成 MIZUKI, Matthew 之類的）
    LanguageCode: "cmn-CN",
  };

  try {
    const data = await polly.synthesizeSpeech(params).promise();
    res.set({
      "Content-Type": "audio/mpeg",
      "Content-Length": data.AudioStream.length,
    });
    res.send(data.AudioStream);
  } catch (err) {
    console.error("Polly error:", err);
    res.status(500).send("Polly 合成失敗");
  }
});

app.listen(3001, () => {
  console.log("✅ 後端伺服器已啟動：http://localhost:3001");
});
